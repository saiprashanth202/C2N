{"version":3,"file":"stormpath.service.js","sourceRoot":"","sources":["../../../../src/stormpath/stormpath.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { Headers, Http, Response, RequestOptions } from '@angular/http';\nimport { Location } from '@angular/common';\nimport { ReplaySubject } from 'rxjs/Rx';\nimport { Observable } from 'rxjs/Observable';\nimport { Account, BaseStormpathAccount } from '../shared/account';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { AuthToken } from './auth.token';\nimport { StormpathConfiguration, StormpathConstants } from './stormpath.config';\nimport { CurrentDomain } from './stormpath.http';\nimport { TokenStoreManager } from './token-store.manager';\n\nlet APPLICATION_JSON: string = 'application/json';\n\nexport class JsonGetOptions extends RequestOptions {\n  constructor() {\n    super({\n      headers: new Headers({'Accept': APPLICATION_JSON}),\n      withCredentials: true\n    });\n  }\n}\n\nexport class JsonPostOptions extends JsonGetOptions {\n  constructor() {\n    super();\n    this.headers.append('Content-Type', APPLICATION_JSON);\n  }\n}\n\nexport function defaultSpTokenResolver(location: Location): string {\n  let m: RegExpMatchArray = location.path().match(/sptoken=([^&]+)/);\n  return m && m.length === 2 ? m[1] : '';\n}\n\nexport interface RegistrationFormModel {\n  email?: string;\n  surname?: string;\n  givenName?: string;\n  password?: string;\n  [propName: string]: any;\n}\n\nexport interface ForgotPasswordFormModel {\n  email: string;\n  accountStore?: Object;\n  organizationNameKey?: string;\n}\n\nexport interface ResendEmailVerificationRequest {\n  login: string;\n  accountStore?: Object;\n  organizationNameKey?: string;\n}\n\nexport interface PasswordResetRequest {\n  accountStore?: Object;\n  organizationNameKey?: string;\n  password: string;\n  sptoken: string;\n}\n\nexport interface LoginFormModel {\n  login: string;\n  password: string;\n  accountStore?: Object;\n  organizationNameKey?: string;\n}\n\nexport interface StormpathErrorResponse {\n  status: number;\n  message: string;\n}\n\nexport class LoginService {\n  public forgot: boolean;\n  public login: boolean;\n  public register: boolean;\n\n  constructor() {\n    this.forgot = false;\n    this.login = true;\n    this.register = false;\n  }\n\n  forgotPassword(): void {\n    this.forgot = true;\n    this.login = false;\n  }\n}\n\n\nexport class Stormpath {\n  public user$: Observable<Account | boolean>;\n  public userSource: ReplaySubject<Account | boolean>;\n  private currentDomain: CurrentDomain;\n  private oauthHeaders: Headers;\n\n  constructor(public http: Http, public config: StormpathConfiguration,\n               public tokenStore: TokenStoreManager) {\n    this.userSource = new ReplaySubject<Account>(1);\n    this.user$ = this.userSource.asObservable();\n    this.getAccount().subscribe(user => this.userSource.next(user));\n    this.currentDomain = new CurrentDomain();\n    this.oauthHeaders = StormpathConstants.OAUTH_HEADERS;\n  }\n\n  /**\n   * Attempts to get the current user by making a request of the /me endpoint.\n   *\n   * @return {Observable<Account | boolean>}\n   * An observable that will return an Account if the user is logged in, or false\n   * if the user is not logged in.\n   */\n  getAccount(): Observable<Account | boolean> {\n    return this.http.get(this.config.meUri, new JsonGetOptions())\n      .map(this.jsonParser)\n      .map(this.accountTransformer)\n      .catch((error: any) => {\n        if (error.status && error.status === 401) {\n          return Observable.of(false);\n        }\n        if (error.status && error.status === 404) {\n          return Observable.throw(new Error('/me endpoint not found, please check server configuration.'));\n        }\n        return Observable.throw(error);\n      });\n  }\n\n  /**\n   * Retrieves the OAuth token data object from storage, relying on its set token\n   * store for the loading implementation details.\n   * @returns {@link AuthToken}\n   */\n  getToken(): AuthToken {\n    return this.tokenStore.get(this.config.oauthTokenName);\n  }\n\n  getRegistrationViewModel(): any {\n    return this.http.get(this.config.registerUri, new JsonGetOptions())\n      .map(this.jsonParser)\n      .catch(this.errorTranslator);\n  }\n\n  /**\n   * Attempts to register a new account by making a POST request to the\n   * /register endpoint.\n   *\n   * @return {Observable<Account>}\n   * An observable that will return an Account if the POST was successful.\n   */\n  register(form: Object): Observable<Account> {\n    let observable: Observable<Account> = this.http.post(this.config.registerUri, JSON.stringify(form), new JsonPostOptions())\n      .map(this.jsonParser)\n      .map(this.accountTransformer)\n      .catch(this.errorTranslator)\n      .share();\n    return observable;\n  }\n\n  login(form: LoginFormModel): Observable<Account> {\n    let observable: Observable<Account>;\n\n    if (this.currentDomain.equals(this.config.loginUri)) {\n      observable = this.http.post(this.config.loginUri, JSON.stringify(form), new JsonPostOptions())\n        .map(this.jsonParser)\n        .map(this.accountTransformer)\n        .catch(this.errorTranslator)\n        .share();\n\n      observable.subscribe(user => this.userSource.next(user), () => undefined);\n      return observable;\n    } else {\n      let data: string = 'username=' + encodeURIComponent(form.login) + '&password=' +\n        encodeURIComponent(form.password) + '&grant_type=password';\n\n      observable = this.http.post(this.config.oauthLoginUri, data, {\n        headers: this.oauthHeaders\n      }).map(this.jsonParser)\n        .map(token => {\n          let authToken: AuthToken = this.tokenStore.setToken(this.config.oauthTokenName, token);\n          return Observable.of(authToken);\n        }).flatMap(() => {\n          return this.getAccount();\n        }).catch(this.errorTranslator)\n        .share();\n\n      observable.subscribe(user => this.userSource.next(user), () => undefined);\n      return observable;\n    }\n  }\n\n  logout(): void {\n    if (this.currentDomain.equals(this.config.loginUri)) {\n      this.http.post(this.config.logoutUri, null, new JsonGetOptions())\n        .catch(this.errorThrower)\n        .subscribe(() => this.userSource.next(false));\n    } else {\n      let token: AuthToken = this.getToken();\n      if (token) {\n        let tokenValue: any = token.refreshToken || token.accessToken;\n        let tokenHint: any = token.refreshToken ? 'refresh_token' : 'access_token';\n        let data: any = 'token=' + encodeURIComponent(tokenValue) + '&token_type_hint=' +\n          encodeURIComponent(tokenHint);\n\n        this.http.post(this.config.oauthLogoutUri, data, {headers: this.oauthHeaders})\n          .map((response: Response) => {\n            this.tokenStore.remove(this.config.oauthTokenName);\n          })\n          .catch(this.errorThrower)\n          .subscribe(() => this.userSource.next(false));\n      } else {\n        this.tokenStore.remove(this.config.oauthTokenName);\n        this.userSource.next(false);\n      }\n    }\n  }\n\n  resendVerificationEmail(request: ResendEmailVerificationRequest): any {\n    return this.http.post(this.config.verifyUri, JSON.stringify(request), new JsonPostOptions())\n      .map(this.jsonParser)\n      .catch(this.errorTranslator);\n  }\n\n  sendPasswordResetEmail(form: ForgotPasswordFormModel): any {\n    return this.http.post(this.config.forgotUri, JSON.stringify(form), new JsonPostOptions())\n      .map(this.jsonParser)\n      .catch(this.errorTranslator);\n  }\n\n  resetPassword(form: PasswordResetRequest): any {\n    return this.http.post(this.config.changeUri, JSON.stringify(form), new JsonPostOptions())\n      .map(this.jsonParser)\n      .catch(this.errorTranslator);\n  }\n\n  verifyEmailVerificationToken(sptoken: string): any {\n    return this.http.get(this.config.verifyUri + '?sptoken=' + sptoken, new JsonGetOptions())\n      .map(this.jsonParser)\n      .catch(this.errorTranslator);\n  }\n\n  verifyPasswordResetToken(sptoken: string): any {\n    return this.http.get(this.config.changeUri + '?sptoken=' + sptoken, new JsonGetOptions())\n      .map(this.jsonParser)\n      .catch(this.errorTranslator);\n  }\n\n  /**\n   * Returns the JSON error from an HTTP response, or a generic error if the\n   * response is not a JSON error\n   * @param {any} error\n   */\n  private errorTranslator(error: any): ErrorObservable<StormpathErrorResponse> {\n    let errorObject: StormpathErrorResponse;\n    try {\n      errorObject = error.json();\n    } catch (e) {\n      console.error(error);\n    }\n    if (!errorObject || !errorObject.message) {\n      errorObject = {message: 'Server Error', status: 0};\n    }\n    return Observable.throw(errorObject);\n  }\n\n  private errorThrower(error: any): ErrorObservable<StormpathErrorResponse> {\n    return Observable.throw(error);\n  }\n\n  private accountTransformer(json: any): Account {\n    if (json && json.account) {\n      return new Account(json.account as BaseStormpathAccount);\n    } else {\n      Observable.throw(new Error('expected an account response'));\n    }\n  }\n\n  private jsonParser(res: Response): any {\n    if (res.text() === '') {\n      return null;\n    }\n    try {\n      return res.json();\n    } catch (e) {\n      throw new Error('Response was not JSON, check your server configuration');\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: StormpathConfiguration, },\n{type: TokenStoreManager, decorators: [{ type: Inject, args: ['tokenStore', ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}