var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Injectable, Inject } from '@angular/core';
import { Headers, Http, RequestOptions } from '@angular/http';
import { ReplaySubject } from 'rxjs/Rx';
import { Observable } from 'rxjs/Observable';
import { Account } from '../shared/account';
import { StormpathConfiguration, StormpathConstants } from './stormpath.config';
import { CurrentDomain } from './stormpath.http';
import { TokenStoreManager } from './token-store.manager';
var APPLICATION_JSON = 'application/json';
export var JsonGetOptions = (function (_super) {
    __extends(JsonGetOptions, _super);
    function JsonGetOptions() {
        _super.call(this, {
            headers: new Headers({ 'Accept': APPLICATION_JSON }),
            withCredentials: true
        });
    }
    return JsonGetOptions;
}(RequestOptions));
export var JsonPostOptions = (function (_super) {
    __extends(JsonPostOptions, _super);
    function JsonPostOptions() {
        _super.call(this);
        this.headers.append('Content-Type', APPLICATION_JSON);
    }
    return JsonPostOptions;
}(JsonGetOptions));
export function defaultSpTokenResolver(location) {
    var m = location.path().match(/sptoken=([^&]+)/);
    return m && m.length === 2 ? m[1] : '';
}
export var LoginService = (function () {
    function LoginService() {
        this.forgot = false;
        this.login = true;
        this.register = false;
    }
    LoginService.prototype.forgotPassword = function () {
        this.forgot = true;
        this.login = false;
    };
    return LoginService;
}());
export var Stormpath = (function () {
    function Stormpath(http, config, tokenStore) {
        var _this = this;
        this.http = http;
        this.config = config;
        this.tokenStore = tokenStore;
        this.userSource = new ReplaySubject(1);
        this.user$ = this.userSource.asObservable();
        this.getAccount().subscribe(function (user) { return _this.userSource.next(user); });
        this.currentDomain = new CurrentDomain();
        this.oauthHeaders = StormpathConstants.OAUTH_HEADERS;
    }
    /**
     * Attempts to get the current user by making a request of the /me endpoint.
     *
     * @return {Observable<Account | boolean>}
     * An observable that will return an Account if the user is logged in, or false
     * if the user is not logged in.
     */
    Stormpath.prototype.getAccount = function () {
        return this.http.get(this.config.meUri, new JsonGetOptions())
            .map(this.jsonParser)
            .map(this.accountTransformer)
            .catch(function (error) {
            if (error.status && error.status === 401) {
                return Observable.of(false);
            }
            if (error.status && error.status === 404) {
                return Observable.throw(new Error('/me endpoint not found, please check server configuration.'));
            }
            return Observable.throw(error);
        });
    };
    /**
     * Retrieves the OAuth token data object from storage, relying on its set token
     * store for the loading implementation details.
     * @returns {@link AuthToken}
     */
    Stormpath.prototype.getToken = function () {
        return this.tokenStore.get(this.config.oauthTokenName);
    };
    Stormpath.prototype.getRegistrationViewModel = function () {
        return this.http.get(this.config.registerUri, new JsonGetOptions())
            .map(this.jsonParser)
            .catch(this.errorTranslator);
    };
    /**
     * Attempts to register a new account by making a POST request to the
     * /register endpoint.
     *
     * @return {Observable<Account>}
     * An observable that will return an Account if the POST was successful.
     */
    Stormpath.prototype.register = function (form) {
        var observable = this.http.post(this.config.registerUri, JSON.stringify(form), new JsonPostOptions())
            .map(this.jsonParser)
            .map(this.accountTransformer)
            .catch(this.errorTranslator)
            .share();
        return observable;
    };
    Stormpath.prototype.login = function (form) {
        var _this = this;
        var observable;
        if (this.currentDomain.equals(this.config.loginUri)) {
            observable = this.http.post(this.config.loginUri, JSON.stringify(form), new JsonPostOptions())
                .map(this.jsonParser)
                .map(this.accountTransformer)
                .catch(this.errorTranslator)
                .share();
            observable.subscribe(function (user) { return _this.userSource.next(user); }, function () { return undefined; });
            return observable;
        }
        else {
            var data = 'username=' + encodeURIComponent(form.login) + '&password=' +
                encodeURIComponent(form.password) + '&grant_type=password';
            observable = this.http.post(this.config.oauthLoginUri, data, {
                headers: this.oauthHeaders
            }).map(this.jsonParser)
                .map(function (token) {
                var authToken = _this.tokenStore.setToken(_this.config.oauthTokenName, token);
                return Observable.of(authToken);
            }).flatMap(function () {
                return _this.getAccount();
            }).catch(this.errorTranslator)
                .share();
            observable.subscribe(function (user) { return _this.userSource.next(user); }, function () { return undefined; });
            return observable;
        }
    };
    Stormpath.prototype.logout = function () {
        var _this = this;
        if (this.currentDomain.equals(this.config.loginUri)) {
            this.http.post(this.config.logoutUri, null, new JsonGetOptions())
                .catch(this.errorThrower)
                .subscribe(function () { return _this.userSource.next(false); });
        }
        else {
            var token = this.getToken();
            if (token) {
                var tokenValue = token.refreshToken || token.accessToken;
                var tokenHint = token.refreshToken ? 'refresh_token' : 'access_token';
                var data = 'token=' + encodeURIComponent(tokenValue) + '&token_type_hint=' +
                    encodeURIComponent(tokenHint);
                this.http.post(this.config.oauthLogoutUri, data, { headers: this.oauthHeaders })
                    .map(function (response) {
                    _this.tokenStore.remove(_this.config.oauthTokenName);
                })
                    .catch(this.errorThrower)
                    .subscribe(function () { return _this.userSource.next(false); });
            }
            else {
                this.tokenStore.remove(this.config.oauthTokenName);
                this.userSource.next(false);
            }
        }
    };
    Stormpath.prototype.resendVerificationEmail = function (request) {
        return this.http.post(this.config.verifyUri, JSON.stringify(request), new JsonPostOptions())
            .map(this.jsonParser)
            .catch(this.errorTranslator);
    };
    Stormpath.prototype.sendPasswordResetEmail = function (form) {
        return this.http.post(this.config.forgotUri, JSON.stringify(form), new JsonPostOptions())
            .map(this.jsonParser)
            .catch(this.errorTranslator);
    };
    Stormpath.prototype.resetPassword = function (form) {
        return this.http.post(this.config.changeUri, JSON.stringify(form), new JsonPostOptions())
            .map(this.jsonParser)
            .catch(this.errorTranslator);
    };
    Stormpath.prototype.verifyEmailVerificationToken = function (sptoken) {
        return this.http.get(this.config.verifyUri + '?sptoken=' + sptoken, new JsonGetOptions())
            .map(this.jsonParser)
            .catch(this.errorTranslator);
    };
    Stormpath.prototype.verifyPasswordResetToken = function (sptoken) {
        return this.http.get(this.config.changeUri + '?sptoken=' + sptoken, new JsonGetOptions())
            .map(this.jsonParser)
            .catch(this.errorTranslator);
    };
    /**
     * Returns the JSON error from an HTTP response, or a generic error if the
     * response is not a JSON error
     * @param {any} error
     */
    Stormpath.prototype.errorTranslator = function (error) {
        var errorObject;
        try {
            errorObject = error.json();
        }
        catch (e) {
            console.error(error);
        }
        if (!errorObject || !errorObject.message) {
            errorObject = { message: 'Server Error', status: 0 };
        }
        return Observable.throw(errorObject);
    };
    Stormpath.prototype.errorThrower = function (error) {
        return Observable.throw(error);
    };
    Stormpath.prototype.accountTransformer = function (json) {
        if (json && json.account) {
            return new Account(json.account);
        }
        else {
            Observable.throw(new Error('expected an account response'));
        }
    };
    Stormpath.prototype.jsonParser = function (res) {
        if (res.text() === '') {
            return null;
        }
        try {
            return res.json();
        }
        catch (e) {
            throw new Error('Response was not JSON, check your server configuration');
        }
    };
    Stormpath.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Stormpath.ctorParameters = function () { return [
        { type: Http, },
        { type: StormpathConfiguration, },
        { type: TokenStoreManager, decorators: [{ type: Inject, args: ['tokenStore',] },] },
    ]; };
    return Stormpath;
}());
//# sourceMappingURL=stormpath.service.js.map