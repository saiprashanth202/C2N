import { Injectable } from '@angular/core';
import { Headers } from '@angular/http';
export var StormpathConstants = (function () {
    function StormpathConstants() {
    }
    StormpathConstants.VERSION = '${VERSION}'; // This value will be overwritten by webpack
    /**
     * Default: `/login`
     *
     * The URI that the login form will post to.  The endpoint MUST accept data
     * in the following format:
     *
     * ```
     * {
      *     username: '',
      *     password: ''
      * }
     * ```
     */
    StormpathConstants.AUTHENTICATION_ENDPOINT = '/login';
    /**
     * Default: `/oauth/token`
     *
     * The endpoint that is used to authenticate and refresh using OAuth tokens.
     * This endpoint MUST support password and refresh_token grant authentication flows.
     */
    StormpathConstants.OAUTH_AUTHENTICATION_ENDPOINT = '/oauth/token';
    /**
     * Default: 'stormpath:token'
     *
     * The name under which tokens are stored in the token storage mechanism.
     * Might not be relevant if the underlying storage mechanism is not key-value based.
     */
    StormpathConstants.OAUTH_TOKEN_STORAGE_NAME = 'stormpath:token';
    StormpathConstants.OAUTH_HEADERS = new Headers({
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json'
    });
    /**
     * Default: `/me`
     *
     * The URI that is used to fetch the account object of
     * the currently logged in user.  This endpoint MUST:
     *  * Respond with a JSON object that is the Stormpath account object,
     *  if the user has an active session.
     *  * Respond with `401 Unauthorized` if the user has no session.
     */
    StormpathConstants.CURRENT_USER_URI = '/me';
    /**
     * Default: `/logout`
     *
     * The URL that the logout action will make a GET request to, this endpoint
     * MUST delete the access token cookie, XSRF token cookie, and any other cookies
     * that relate to the user session.
     */
    StormpathConstants.DESTROY_SESSION_ENDPOINT = '/logout';
    /**
     * Default: `/oauth/revoke`
     *
     * The endpoint that is used to revoke OAuth tokens.
     */
    StormpathConstants.OAUTH_REVOKE_ENDPOINT = '/oauth/revoke';
    /**
     * Default: `/verify`
     *
     * The endpoint that is used for verifying an account that requires email
     * verification.
     *
     * This endpoint MUST accept a POST request with the following format and
     * use Stormpath to verify the token:
     * ```
     * {
      *   sptoken: '<token from email sent to user>'
      * }
     * ```
     *
     */
    StormpathConstants.EMAIL_VERIFICATION_ENDPOINT = '/verify';
    /**
     * Default: `/forgot`
     *
     * The endpoint that is used by to create password reset tokens.
     */
    StormpathConstants.FORGOT_PASSWORD_ENDPOINT = '/forgot';
    /**
     * Default: `/change`
     *
     * The endpoint that is used to verify and consume password reset tokens
     * (change a user's password with the token).
     */
    StormpathConstants.CHANGE_PASSWORD_ENDPOINT = '/change';
    /**
     * Default: `/register`
     *
     * The endpoint that is used to POST new users.  This endpoint MUST accept a
     * stormpath account object and use Stormpath to create the new user.
     */
    StormpathConstants.REGISTER_URI = '/register';
    /**
     * Default: *none*
     *
     * A prefix, e.g. "base URL" to add to all endpoints that are used by this SDK.
     * Use this if your backend API is running on a different port or domain than
     * your Angular application.  Omit the trailing forward slash.
     *
     * **NOTE:** This may trigger
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)
     * behaviour in the browser, and your server
     * will need to respond to requests accordingly.  If you are using our
     * Express SDK see
     * [allowedOrigins](https://github.com/stormpath/stormpath-sdk-express#allowedOrigins)
     *
     * **Example:**
     * <pre>
     *   ENDPOINT_PREFIX = 'http://api.mydomain.com'
     * </pre>
     */
    StormpathConstants.ENDPOINT_PREFIX = '';
    return StormpathConstants;
}());
export var StormpathConfiguration = (function () {
    function StormpathConfiguration() {
        this._autoAuthorizedUris = [];
        this._changeUri = StormpathConstants.CHANGE_PASSWORD_ENDPOINT;
        this._forgotUri = StormpathConstants.FORGOT_PASSWORD_ENDPOINT;
        this._loginUri = StormpathConstants.AUTHENTICATION_ENDPOINT;
        this._logoutUri = StormpathConstants.DESTROY_SESSION_ENDPOINT;
        this._oauthLoginUri = StormpathConstants.OAUTH_AUTHENTICATION_ENDPOINT;
        this._oauthLogoutUri = StormpathConstants.OAUTH_REVOKE_ENDPOINT;
        this._oauthTokenName = StormpathConstants.OAUTH_TOKEN_STORAGE_NAME;
        this._meUri = StormpathConstants.CURRENT_USER_URI;
        this._registerUri = StormpathConstants.REGISTER_URI;
        this._verifyUri = StormpathConstants.EMAIL_VERIFICATION_ENDPOINT;
        this._endpointPrefix = StormpathConstants.ENDPOINT_PREFIX;
        this._version = StormpathConstants.VERSION;
    }
    Object.defineProperty(StormpathConfiguration.prototype, "endpointUris", {
        /**
         * Return a list of all available URIs. This list is used to decide whether
         * X-Stormpath-Agent is sent as a header or not.
         *
         * @returns {[string]} Array of all Stormpath endpoints, in alphabetical order.
         */
        get: function () {
            return [this.changeUri, this.forgotUri, this.loginUri, this.logoutUri, this.meUri, this.registerUri, this.verifyUri];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "autoAuthorizedUris", {
        /**
         * Return a list of URIs that get a Bearer token added automatically. To add to this list, use the following syntax:
         *
         * <pre>
         *   let config: StormpathConfiguration = new StormpathConfiguration();
         *   config.autoAuthorizedUris.push(new RegExp('http://localhost:3000/myapi/*)');
         * </pre>
         *
         * @returns {[string]}
         */
        get: function () {
            // if empty, set to me and return. Can't do in constructor because /me will be set as default
            // and won't be picked up if it's overriden by a developer.
            if (this._autoAuthorizedUris.length === 0) {
                this._autoAuthorizedUris = [new RegExp(this.meUri)];
            }
            return this._autoAuthorizedUris;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "changeUri", {
        get: function () {
            return this._endpointPrefix + this._changeUri;
        },
        set: function (value) {
            this._changeUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "forgotUri", {
        get: function () {
            return this._endpointPrefix + this._forgotUri;
        },
        set: function (value) {
            this._forgotUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "loginUri", {
        get: function () {
            return this._endpointPrefix + this._loginUri;
        },
        set: function (value) {
            this._loginUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "logoutUri", {
        get: function () {
            return this._endpointPrefix + this._logoutUri;
        },
        set: function (value) {
            this._logoutUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "oauthLoginUri", {
        get: function () {
            return this._endpointPrefix + this._oauthLoginUri;
        },
        set: function (value) {
            this._oauthLoginUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "oauthLogoutUri", {
        get: function () {
            return this._endpointPrefix + this._oauthLogoutUri;
        },
        set: function (value) {
            this._oauthLogoutUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "oauthTokenName", {
        get: function () {
            return this._oauthTokenName;
        },
        set: function (value) {
            this._oauthTokenName = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "meUri", {
        get: function () {
            return this._endpointPrefix + this._meUri;
        },
        set: function (value) {
            this._meUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "registerUri", {
        get: function () {
            return this._endpointPrefix + this._registerUri;
        },
        set: function (value) {
            this._registerUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "verifyUri", {
        get: function () {
            return this._endpointPrefix + this._verifyUri;
        },
        set: function (value) {
            this._verifyUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "endpointPrefix", {
        get: function () {
            return this._endpointPrefix;
        },
        set: function (value) {
            this._endpointPrefix = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: true,
        configurable: true
    });
    StormpathConfiguration.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    StormpathConfiguration.ctorParameters = function () { return []; };
    return StormpathConfiguration;
}());
//# sourceMappingURL=stormpath.config.js.map