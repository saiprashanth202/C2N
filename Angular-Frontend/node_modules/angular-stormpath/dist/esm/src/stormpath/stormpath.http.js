var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Injectable, Inject, VERSION } from '@angular/core';
import { Http, ConnectionBackend, Request, RequestOptions, Headers } from '@angular/http';
import { Observable } from 'rxjs';
import { JsonGetOptions } from './stormpath.service';
import { TokenStoreManager } from './token-store.manager';
import { StormpathConfiguration, StormpathConstants } from './stormpath.config';
import { AuthToken } from './auth.token';
// function that allows overriding the default Http provider
export function httpFactory(backend, defaultOptions, config, tokenStore) {
    return new StormpathHttp(backend, defaultOptions, config, tokenStore);
}
export var StormpathHttp = (function (_super) {
    __extends(StormpathHttp, _super);
    function StormpathHttp(backend, defaultOptions, config, tokenStore) {
        _super.call(this, backend, defaultOptions);
        this.backend = backend;
        this.defaultOptions = defaultOptions;
        this.config = config;
        this.tokenStore = tokenStore;
        this.currentDomain = new CurrentDomain();
    }
    /**
     * Override all requests to add x-stormpath-agent and authorization headers when appropriate
     * @param url the url or a Request
     * @param options request options
     * @returns {Observable<Response>} the response as an observable
     */
    StormpathHttp.prototype.request = function (url, options) {
        var _this = this;
        this.addHeaders(url, options);
        return _super.prototype.request.call(this, url, options)
            .catch(function (initialError) {
            if (initialError && initialError.status === 401) {
                var token = _this.tokenStore.get(_this.config.oauthTokenName);
                // token might be expired, try to refresh
                if ((!AuthToken.isValid(token)) && token && token.refreshToken) {
                    var data = 'grant_type=refresh_token&refresh_token=' + token.refreshToken;
                    return _super.prototype.post.call(_this, _this.config.oauthLoginUri, data, {
                        headers: StormpathConstants.OAUTH_HEADERS
                    }).map(function (response) { return response.json(); })
                        .mergeMap(function (token) {
                        _this.tokenStore.setToken(_this.config.oauthTokenName, token);
                        // attempt the same request again
                        return _this.request(url, options);
                    });
                }
                else {
                    return Observable.throw(initialError);
                }
            }
            else {
                return Observable.throw(initialError);
            }
        });
    };
    /**
     * Add Stormpath headers and be aware of options versus request.headers
     * @param url
     * @param options
     */
    StormpathHttp.prototype.addHeaders = function (url, options) {
        var requestUri = (url instanceof Request) ? url.url : url;
        var addToken = this.config.autoAuthorizedUris.some(function (rx) { return rx.test(requestUri); });
        if (options == null && addToken) {
            // add headers 'accept: application/json' and 'withCredential: true'
            options = new JsonGetOptions();
        }
        else {
            options = new RequestOptions();
        }
        if (options.headers == null) {
            options.headers = new Headers();
        }
        var version = (VERSION) ? VERSION.full : '2.x';
        if (this.config.endpointUris.indexOf(requestUri) > -1) {
            options.headers.set('X-Stormpath-Agent', 'stormpath-sdk-angular/' + this.config.version + ' angular/' + version);
            if (url instanceof Request) {
                url.headers.set('X-Stormpath-Agent', 'stormpath-sdk-angular/' + this.config.version + ' angular/' + version);
            }
        }
        if (!this.currentDomain.equals(requestUri) && addToken) {
            var token = this.tokenStore.get(this.config.oauthTokenName);
            if (AuthToken.isValid(token)) {
                options.headers.set('Authorization', 'Bearer ' + token.accessToken);
                if (url instanceof Request) {
                    url.headers.set('Authorization', 'Bearer ' + token.accessToken);
                }
            }
        }
    };
    StormpathHttp.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    StormpathHttp.ctorParameters = function () { return [
        { type: ConnectionBackend, },
        { type: RequestOptions, },
        { type: StormpathConfiguration, },
        { type: TokenStoreManager, decorators: [{ type: Inject, args: ['tokenStore',] },] },
    ]; };
    return StormpathHttp;
}(Http));
export var CurrentDomain = (function () {
    function CurrentDomain() {
        this.window = window;
    }
    CurrentDomain.prototype.equals = function (url) {
        var link = this.window.document.createElement('a');
        link.href = url;
        return this.window.location.host === link.host;
    };
    CurrentDomain.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    CurrentDomain.ctorParameters = function () { return []; };
    return CurrentDomain;
}());
//# sourceMappingURL=stormpath.http.js.map