var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { LocalStorageService } from 'ng2-webstorage';
import { CookieService } from 'angular2-cookie/core';
import { Injectable } from '@angular/core';
import { AuthToken } from './auth.token';
export var TokenStoreManager = (function () {
    function TokenStoreManager() {
    }
    TokenStoreManager.prototype.setToken = function (name, token) {
        // Store a time at which we should renew the token, subtract off one second to give us some buffer of time
        var exp = new Date(new Date().setMilliseconds(0) + ((token.expires_in - 1) * 1000));
        var authToken = new AuthToken(token.access_token, token.refresh_token, token.token_type, token.expires_in, token.expires_in, exp);
        this.put(name, authToken);
        return authToken;
    };
    return TokenStoreManager;
}());
export var LocalStorageTokenStoreManager = (function (_super) {
    __extends(LocalStorageTokenStoreManager, _super);
    function LocalStorageTokenStoreManager(localStorage) {
        _super.call(this);
        this.localStorage = localStorage;
    }
    LocalStorageTokenStoreManager.prototype.get = function (key) {
        return this.localStorage.retrieve(key);
    };
    LocalStorageTokenStoreManager.prototype.put = function (key, value) {
        this.localStorage.store(key, value);
    };
    LocalStorageTokenStoreManager.prototype.remove = function (key) {
        this.localStorage.clear(key);
    };
    LocalStorageTokenStoreManager.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LocalStorageTokenStoreManager.ctorParameters = function () { return [
        { type: LocalStorageService, },
    ]; };
    return LocalStorageTokenStoreManager;
}(TokenStoreManager));
export var CookieTokenStoreManager = (function (_super) {
    __extends(CookieTokenStoreManager, _super);
    function CookieTokenStoreManager(cookieService) {
        _super.call(this);
        this.cookieService = cookieService;
    }
    CookieTokenStoreManager.prototype.get = function (key) {
        var token = this.cookieService.getObject(key);
        if (token) {
            return new AuthToken(token.accessToken, token.refreshToken, token.tokenType, token.expiresIn, token.expiresAt, token.exp);
        }
        else {
            return null;
        }
    };
    CookieTokenStoreManager.prototype.put = function (key, value) {
        this.cookieService.putObject(key, value);
    };
    CookieTokenStoreManager.prototype.remove = function (key) {
        this.cookieService.remove(key);
    };
    CookieTokenStoreManager.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    CookieTokenStoreManager.ctorParameters = function () { return [
        { type: CookieService, },
    ]; };
    return CookieTokenStoreManager;
}(TokenStoreManager));
//# sourceMappingURL=token-store.manager.js.map