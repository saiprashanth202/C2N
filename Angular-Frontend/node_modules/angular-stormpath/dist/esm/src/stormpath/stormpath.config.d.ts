import { Headers } from '@angular/http';
export declare class StormpathConstants {
    static readonly VERSION: string;
    /**
     * Default: `/login`
     *
     * The URI that the login form will post to.  The endpoint MUST accept data
     * in the following format:
     *
     * ```
     * {
      *     username: '',
      *     password: ''
      * }
     * ```
     */
    static readonly AUTHENTICATION_ENDPOINT: string;
    /**
     * Default: `/oauth/token`
     *
     * The endpoint that is used to authenticate and refresh using OAuth tokens.
     * This endpoint MUST support password and refresh_token grant authentication flows.
     */
    static readonly OAUTH_AUTHENTICATION_ENDPOINT: string;
    /**
     * Default: 'stormpath:token'
     *
     * The name under which tokens are stored in the token storage mechanism.
     * Might not be relevant if the underlying storage mechanism is not key-value based.
     */
    static readonly OAUTH_TOKEN_STORAGE_NAME: string;
    static readonly OAUTH_HEADERS: Headers;
    /**
     * Default: `/me`
     *
     * The URI that is used to fetch the account object of
     * the currently logged in user.  This endpoint MUST:
     *  * Respond with a JSON object that is the Stormpath account object,
     *  if the user has an active session.
     *  * Respond with `401 Unauthorized` if the user has no session.
     */
    static readonly CURRENT_USER_URI: string;
    /**
     * Default: `/logout`
     *
     * The URL that the logout action will make a GET request to, this endpoint
     * MUST delete the access token cookie, XSRF token cookie, and any other cookies
     * that relate to the user session.
     */
    static readonly DESTROY_SESSION_ENDPOINT: string;
    /**
     * Default: `/oauth/revoke`
     *
     * The endpoint that is used to revoke OAuth tokens.
     */
    static readonly OAUTH_REVOKE_ENDPOINT: string;
    /**
     * Default: `/verify`
     *
     * The endpoint that is used for verifying an account that requires email
     * verification.
     *
     * This endpoint MUST accept a POST request with the following format and
     * use Stormpath to verify the token:
     * ```
     * {
      *   sptoken: '<token from email sent to user>'
      * }
     * ```
     *
     */
    static readonly EMAIL_VERIFICATION_ENDPOINT: string;
    /**
     * Default: `/forgot`
     *
     * The endpoint that is used by to create password reset tokens.
     */
    static readonly FORGOT_PASSWORD_ENDPOINT: string;
    /**
     * Default: `/change`
     *
     * The endpoint that is used to verify and consume password reset tokens
     * (change a user's password with the token).
     */
    static readonly CHANGE_PASSWORD_ENDPOINT: string;
    /**
     * Default: `/register`
     *
     * The endpoint that is used to POST new users.  This endpoint MUST accept a
     * stormpath account object and use Stormpath to create the new user.
     */
    static readonly REGISTER_URI: string;
    /**
     * Default: *none*
     *
     * A prefix, e.g. "base URL" to add to all endpoints that are used by this SDK.
     * Use this if your backend API is running on a different port or domain than
     * your Angular application.  Omit the trailing forward slash.
     *
     * **NOTE:** This may trigger
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)
     * behaviour in the browser, and your server
     * will need to respond to requests accordingly.  If you are using our
     * Express SDK see
     * [allowedOrigins](https://github.com/stormpath/stormpath-sdk-express#allowedOrigins)
     *
     * **Example:**
     * <pre>
     *   ENDPOINT_PREFIX = 'http://api.mydomain.com'
     * </pre>
     */
    static readonly ENDPOINT_PREFIX: string;
}
export declare class StormpathConfiguration {
    private _changeUri;
    private _forgotUri;
    private _loginUri;
    private _logoutUri;
    private _oauthLoginUri;
    private _oauthLogoutUri;
    private _oauthTokenName;
    private _meUri;
    private _registerUri;
    private _verifyUri;
    private _endpointPrefix;
    private _version;
    private _autoAuthorizedUris;
    constructor();
    /**
     * Return a list of all available URIs. This list is used to decide whether
     * X-Stormpath-Agent is sent as a header or not.
     *
     * @returns {[string]} Array of all Stormpath endpoints, in alphabetical order.
     */
    readonly endpointUris: Array<string>;
    /**
     * Return a list of URIs that get a Bearer token added automatically. To add to this list, use the following syntax:
     *
     * <pre>
     *   let config: StormpathConfiguration = new StormpathConfiguration();
     *   config.autoAuthorizedUris.push(new RegExp('http://localhost:3000/myapi/*)');
     * </pre>
     *
     * @returns {[string]}
     */
    readonly autoAuthorizedUris: Array<RegExp>;
    changeUri: string;
    forgotUri: string;
    loginUri: string;
    logoutUri: string;
    oauthLoginUri: string;
    oauthLogoutUri: string;
    oauthTokenName: string;
    meUri: string;
    registerUri: string;
    verifyUri: string;
    endpointPrefix: string;
    readonly version: string;
}
