{"version":3,"file":"token-store.manager.js","sourceRoot":"","sources":["../../../../src/stormpath/token-store.manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { LocalStorageService } from 'ng2-webstorage';\nimport { CookieService } from 'angular2-cookie/core';\nimport { Injectable } from '@angular/core';\nimport { AuthToken } from './auth.token';\n\nexport abstract class TokenStoreManager {\n  abstract get(key: string): AuthToken;\n\n  abstract put(key: string, value: AuthToken): any;\n\n  abstract remove(key: string): void;\n\n  setToken(name: string, token: any): AuthToken {\n    // Store a time at which we should renew the token, subtract off one second to give us some buffer of time\n    let exp: Date = new Date(new Date().setMilliseconds(0) + ((token.expires_in - 1) * 1000));\n    let authToken: AuthToken = new AuthToken(token.access_token, token.refresh_token, token.token_type,\n      token.expires_in, token.expires_in, exp);\n    this.put(name, authToken);\n    return authToken;\n  }\n}\n\n\nexport class LocalStorageTokenStoreManager extends TokenStoreManager {\n\n  constructor(private localStorage: LocalStorageService) {\n    super();\n  }\n\n  get(key: string): AuthToken {\n    return this.localStorage.retrieve(key);\n  }\n\n  put(key: string, value: AuthToken): void {\n    this.localStorage.store(key, value);\n  }\n\n  remove(key: string): void {\n    this.localStorage.clear(key);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocalStorageService, },\n];\n}\n\n\nexport class CookieTokenStoreManager extends TokenStoreManager {\n\n  constructor(private cookieService: CookieService) {\n    super();\n  }\n\n  get(key: string): AuthToken {\n    let token: any = this.cookieService.getObject(key);\n    if (token) {\n      return new AuthToken(token.accessToken, token.refreshToken, token.tokenType, token.expiresIn, token.expiresAt, token.exp);\n    } else {\n      return null;\n    }\n  }\n\n  put(key: string, value: AuthToken): void {\n    this.cookieService.putObject(key, value);\n  }\n\n  remove(key: string): void {\n    this.cookieService.remove(key);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CookieService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}