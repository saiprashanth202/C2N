{"version":3,"file":"reset-password.component.js","sourceRoot":"","sources":["../../../../src/reset-password/reset-password.component.ts"],"names":[],"mappings":"OAAO,EAAE,SAAS,EAAE,UAAU,EAAuB,KAAK,EAAE,MAAM,eAAe;OAC1E,EAAE,QAAQ,EAAE,MAAM,iBAAiB;OACnC,EAAE,SAAS,EAAwB,sBAAsB,EAAE,MAAM,gCAAgC;AAIxG;IAqBE,gCAAmB,SAAoB,EAAS,QAAkB;QAA/C,cAAS,GAAT,SAAS,CAAW;QAAS,aAAQ,GAAR,QAAQ,CAAU;IAClE,CAAC;IAED,yCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG;YACf,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE;YAC/B,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,WAAW;QACX,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;QAEhB,CAAC;IACH,CAAC;IAED,gDAAe,GAAf;QACE,MAAM,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,uCAAM,GAAN;QAAA,iBAcC;QAbC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;aAC5D,SAAS,CAAC;YACT,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,CAAC,EAAE,UAAC,KAAK;YACP,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBACzC,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YACjC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,qCAAI,GAAJ;QAAA,iBAYC;QAXC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC;aACzC,SAAS,CACV;YACE,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC,EACD,UAAC,KAAK;YACJ,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;QAC7B,CAAC,CACA,CAAC;IACN,CAAC;IAED,yCAAQ,GAAR;QACE,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IACI,iCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,gBAAgB;oBAC1B,QAAQ,EAAE,42DAuCA;iBACX,EAAG,EAAE;QACN,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,qCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,SAAS,GAAG;QACnB,EAAC,IAAI,EAAE,QAAQ,GAAG;KACjB,EAH6F,CAG7F,CAAC;IACK,qCAAc,GAA2C;QAChE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KACnC,CAAC;IACF,6BAAC;AAAD,CAAC,AAlID,IAkIC","sourcesContent":["import { Component, Injectable, OnInit, TemplateRef, Input } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Stormpath, PasswordResetRequest, defaultSpTokenResolver } from '../stormpath/stormpath.service';\n\n\n\nexport class ResetPasswordComponent implements OnInit {\n  /**\n   * A reference to a `<template>` tag that if set will override this component's template. Use like so:\n   * ```\n   * <template #customTemplate>\n   *   // custom HTML with login form\n   * </template>\n   * ```\n   * Then pass customTemplate to the `reset-password` component like so `[customTemplate]=\"customTemplate\"`\n   */\n   customTemplate: TemplateRef<any>;\n  protected disabled: boolean;\n  protected error: string;\n  protected formModel: PasswordResetRequest;\n  protected posting: boolean;\n  protected reset: boolean;\n  protected verifying: boolean;\n  protected verified: boolean;\n  protected verificationFailed: boolean;\n  protected sptoken: string;\n\n  constructor(public stormpath: Stormpath, public location: Location) {\n  }\n\n  ngOnInit(): void {\n    this.verifying = false;\n    this.verified = false;\n    this.verificationFailed = false;\n    this.formModel = {\n      sptoken: this.spTokenResolver(),\n      password: ''\n    };\n    // debugger\n    if (this.formModel.sptoken) {\n      this.verify();\n\n    }\n  }\n\n  spTokenResolver(): string {\n    return defaultSpTokenResolver(this.location);\n  }\n\n  verify(): void {\n    this.verifying = true;\n    this.stormpath.verifyPasswordResetToken(this.formModel.sptoken)\n      .subscribe(() => {\n        this.verifying = false;\n        this.verified = true;\n      }, (error) => {\n        this.verifying = false;\n        if (error.status && error.status === 404) {\n          this.verificationFailed = true;\n        } else {\n          this.error = error.message;\n        }\n      });\n  }\n\n  send(): void {\n    this.stormpath.resetPassword(this.formModel)\n      .subscribe(\n      () => {\n        this.posting = false;\n        this.reset = true;\n      },\n      (error) => {\n        this.posting = false;\n        this.error = error.message;\n      }\n      );\n  }\n\n  onSubmit(): void {\n    this.send();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'reset-password',\n  template: `<template #defaultTemplate>\n<div class=\"row\">\n  <div class=\"col-sm-offset-4 col-xs-12 col-sm-4\">\n    <p *ngIf=\"verifying\" class=\"alert alert-warning text-center\">We are verifying your password reset link</p>\n    <p class=\"alert alert-success\" *ngIf=\"reset\">Your new password has been set, you may now login.</p>\n    <div *ngIf=\"verificationFailed\" class=\"alert alert-danger\">\n      This password reset link is not valid, please request a new reset link.\n    </div>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-xs-12\">\n    <form class=\"form-horizontal\" *ngIf=\"verified && !reset\" (ngSubmit)=\"onSubmit()\" autocomplete=\"off\">\n      <div class=\"form-group\">\n        <label for=\"spUsername\" class=\"col-xs-12 col-sm-4 control-label\">New Password</label>\n        <div class=\"col-xs-12 col-sm-4\">\n          <input class=\"form-control\" id=\"spUsername\" [(ngModel)]=\"formModel.password\"\n                 placeholder=\"New Password\" type=\"password\" [disabled]=\"posting\">\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"spPassword\" class=\"col-xs-12 col-sm-4 control-label\">Confirm New Password</label>\n        <div class=\"col-xs-12 col-sm-4\">\n          <input class=\"form-control\" id=\"spPassword\" [(ngModel)]=\"formModel.confirmPassword\"\n                 placeholder=\"Confirm New Password\" type=\"password\" [disabled]=\"posting\">\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-4 col-sm-4\">\n          <p class=\"alert alert-danger\" *ngIf=\"error\">{{error}}</p>\n          <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"posting\">Set New Password</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n</template>\n<template\n  [ngTemplateOutlet]=\"customTemplate || defaultTemplate\">\n</template>`\n}, ] },\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Stormpath, },\n{type: Location, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'customTemplate': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}