import { Component, Injectable, Input } from '@angular/core';
import { Location } from '@angular/common';
import { Stormpath, defaultSpTokenResolver } from '../stormpath/stormpath.service';
export var ResetPasswordComponent = (function () {
    function ResetPasswordComponent(stormpath, location) {
        this.stormpath = stormpath;
        this.location = location;
    }
    ResetPasswordComponent.prototype.ngOnInit = function () {
        this.verifying = false;
        this.verified = false;
        this.verificationFailed = false;
        this.formModel = {
            sptoken: this.spTokenResolver(),
            password: ''
        };
        // debugger
        if (this.formModel.sptoken) {
            this.verify();
        }
    };
    ResetPasswordComponent.prototype.spTokenResolver = function () {
        return defaultSpTokenResolver(this.location);
    };
    ResetPasswordComponent.prototype.verify = function () {
        var _this = this;
        this.verifying = true;
        this.stormpath.verifyPasswordResetToken(this.formModel.sptoken)
            .subscribe(function () {
            _this.verifying = false;
            _this.verified = true;
        }, function (error) {
            _this.verifying = false;
            if (error.status && error.status === 404) {
                _this.verificationFailed = true;
            }
            else {
                _this.error = error.message;
            }
        });
    };
    ResetPasswordComponent.prototype.send = function () {
        var _this = this;
        this.stormpath.resetPassword(this.formModel)
            .subscribe(function () {
            _this.posting = false;
            _this.reset = true;
        }, function (error) {
            _this.posting = false;
            _this.error = error.message;
        });
    };
    ResetPasswordComponent.prototype.onSubmit = function () {
        this.send();
    };
    ResetPasswordComponent.decorators = [
        { type: Component, args: [{
                    selector: 'reset-password',
                    template: "<template #defaultTemplate>\n<div class=\"row\">\n  <div class=\"col-sm-offset-4 col-xs-12 col-sm-4\">\n    <p *ngIf=\"verifying\" class=\"alert alert-warning text-center\">We are verifying your password reset link</p>\n    <p class=\"alert alert-success\" *ngIf=\"reset\">Your new password has been set, you may now login.</p>\n    <div *ngIf=\"verificationFailed\" class=\"alert alert-danger\">\n      This password reset link is not valid, please request a new reset link.\n    </div>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-xs-12\">\n    <form class=\"form-horizontal\" *ngIf=\"verified && !reset\" (ngSubmit)=\"onSubmit()\" autocomplete=\"off\">\n      <div class=\"form-group\">\n        <label for=\"spUsername\" class=\"col-xs-12 col-sm-4 control-label\">New Password</label>\n        <div class=\"col-xs-12 col-sm-4\">\n          <input class=\"form-control\" id=\"spUsername\" [(ngModel)]=\"formModel.password\"\n                 placeholder=\"New Password\" type=\"password\" [disabled]=\"posting\">\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"spPassword\" class=\"col-xs-12 col-sm-4 control-label\">Confirm New Password</label>\n        <div class=\"col-xs-12 col-sm-4\">\n          <input class=\"form-control\" id=\"spPassword\" [(ngModel)]=\"formModel.confirmPassword\"\n                 placeholder=\"Confirm New Password\" type=\"password\" [disabled]=\"posting\">\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-4 col-sm-4\">\n          <p class=\"alert alert-danger\" *ngIf=\"error\">{{error}}</p>\n          <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"posting\">Set New Password</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n</template>\n<template\n  [ngTemplateOutlet]=\"customTemplate || defaultTemplate\">\n</template>"
                },] },
        { type: Injectable },
    ];
    /** @nocollapse */
    ResetPasswordComponent.ctorParameters = function () { return [
        { type: Stormpath, },
        { type: Location, },
    ]; };
    ResetPasswordComponent.propDecorators = {
        'customTemplate': [{ type: Input },],
    };
    return ResetPasswordComponent;
}());
//# sourceMappingURL=reset-password.component.js.map