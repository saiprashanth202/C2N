{"version":3,"file":"stormpath.module.js","sourceRoot":"","sources":["../../../src/stormpath.module.ts"],"names":[],"mappings":"OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe;OACjC,EAAE,YAAY,EAAE,MAAM,iBAAiB;OACvC,EAAE,WAAW,EAAE,MAAM,gBAAgB;OACrC,EAAE,iBAAiB,EAAE,MAAM,+BAA+B;OAC1D,EAAE,uBAAuB,EAAE,MAAM,6CAA6C;OAC9E,EAAE,cAAc,EAAE,MAAM,yBAAyB;OACjD,EAAE,iBAAiB,EAAE,MAAM,+BAA+B;OAC1D,EAAE,UAAU,EAAE,cAAc,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,eAAe;OACrE,EAAE,YAAY,EAAE,MAAM,+BAA+B;OACrD,EAAE,sBAAsB,EAAE,MAAM,8BAA8B;OAC9D,EAAE,WAAW,EAAE,MAAM,4BAA4B;OACjD,EAAE,0BAA0B,EAAE,MAAM,mDAAmD;OACvF,EAAE,sBAAsB,EAAE,MAAM,2CAA2C;OAC3E,EAAE,gCAAgC,EAAE,MAAM,iEAAiE;OAC3G,EAAE,YAAY,EAAE,MAAM,2BAA2B;OACjD,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,MAAM,iCAAiC;OACjG,EAAE,SAAS,EAAE,MAAM,+BAA+B;OAClD,EAAE,aAAa,EAAE,MAAM,gBAAgB;OACvC,EAAE,aAAa,EAAE,MAAM,sBAAsB;AAGpD;IAAA;IAuCA,CAAC;IAtCM,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;oBACvB,YAAY,EAAE;wBACZ,iBAAiB;wBACjB,uBAAuB;wBACvB,cAAc;wBACd,iBAAiB;wBACjB,0BAA0B;wBAC1B,sBAAsB;wBACtB,gCAAgC;qBACjC;oBACD,OAAO,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,UAAU,EAAE,aAAa,CAAC;oBAC/D,OAAO,EAAE;wBACP,iBAAiB;wBACjB,uBAAuB;wBACvB,cAAc;wBACd,iBAAiB;wBACjB,0BAA0B;wBAC1B,sBAAsB;wBACtB,gCAAgC;qBACjC;oBACD,SAAS,EAAE;wBACT,YAAY,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,aAAa;wBACnF,SAAS,EAAE,sBAAsB,EAAE,YAAY;wBAC/C;4BACE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,6BAA6B;yBAC/D;wBACD;4BACE,OAAO,EAAE,IAAI;4BACb,UAAU,EAAE,WAAW;4BACvB,IAAI,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,sBAAsB,EAAE,YAAY,CAAC;yBACzE;qBACF;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,sBAAC;AAAD,CAAC,AAvCD,IAuCC","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AuthPortComponent } from './authport/authport.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HttpModule, RequestOptions, Http, XHRBackend } from '@angular/http';\nimport { LoginService } from './stormpath/stormpath.service';\nimport { StormpathConfiguration } from './stormpath/stormpath.config';\nimport { httpFactory } from './stormpath/stormpath.http';\nimport { EmailVerificationComponent } from './email-verification/email-verification.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { ResendEmailVerificationComponent } from './resend-email-verification/resend-email-verification.component';\nimport { EventManager } from './stormpath/event.manager';\nimport { LocalStorageTokenStoreManager, CookieTokenStoreManager } from './stormpath/token-store.manager';\nimport { Stormpath } from './stormpath/stormpath.service';\nimport { Ng2Webstorage } from 'ng2-webstorage';\nimport { CookieService } from 'angular2-cookie/core';\n\n\nexport class StormpathModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    AuthPortComponent,\n    ForgotPasswordComponent,\n    LoginComponent,\n    RegisterComponent,\n    EmailVerificationComponent,\n    ResetPasswordComponent,\n    ResendEmailVerificationComponent\n  ],\n  imports: [CommonModule, FormsModule, HttpModule, Ng2Webstorage],\n  exports: [\n    AuthPortComponent,\n    ForgotPasswordComponent,\n    LoginComponent,\n    RegisterComponent,\n    EmailVerificationComponent,\n    ResetPasswordComponent,\n    ResendEmailVerificationComponent\n  ],\n  providers: [\n    EventManager, LocalStorageTokenStoreManager, CookieTokenStoreManager, CookieService,\n    Stormpath, StormpathConfiguration, LoginService,\n    {\n      provide: 'tokenStore', useClass: LocalStorageTokenStoreManager,\n    },\n    {\n      provide: Http,\n      useFactory: httpFactory,\n      deps: [XHRBackend, RequestOptions, StormpathConfiguration, 'tokenStore']\n    }\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}