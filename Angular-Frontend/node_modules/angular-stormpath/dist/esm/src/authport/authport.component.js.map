{"version":3,"file":"authport.component.js","sourceRoot":"","sources":["../../../../src/authport/authport.component.ts"],"names":[],"mappings":"OAAO,EAAE,SAAS,EAAuB,KAAK,EAAE,MAAM,eAAe;OAC9D,EAAE,UAAU,EAAE,MAAM,eAAe;OAEnC,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,gCAAgC;AAKxE;IAkBE,2BAAmB,SAAoB,EAAS,YAA0B;QAAvD,cAAS,GAAT,SAAS,CAAW;QAAS,iBAAY,GAAZ,YAAY,CAAc;QACxE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC;IAClD,CAAC;IAED,oCAAQ,GAAR;QACE,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,KAAK,CAAC;QACnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC;IAClD,CAAC;IAED,qCAAS,GAAT;QACE,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC;IAC7F,CAAC;IAED,wCAAY,GAAZ;QACE,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;QAC3D,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC;IACpC,CAAC;IAED,0CAAc,GAAd;QACE,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,kCAAM,GAAN;QACE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;IACI,4BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,yjDAuCA;oBACV,SAAS,EAAE,CAAC,YAAY,CAAC;iBAC1B,EAAG,EAAE;QACN,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,gCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,SAAS,GAAG;QACnB,EAAC,IAAI,EAAE,YAAY,GAAG;KACrB,EAH6F,CAG7F,CAAC;IACK,gCAAc,GAA2C;QAChE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KACnC,CAAC;IACF,wBAAC;AAAD,CAAC,AAvGD,IAuGC","sourcesContent":["import { Component, OnInit, TemplateRef, Input } from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Stormpath, LoginService } from '../stormpath/stormpath.service';\nimport { Account } from '../shared/account';\n\n\n\nexport class AuthPortComponent implements OnInit {\n  /**\n   * A reference to a `<template>` tag that if set will override this component's template. Use like so:\n   * ```\n   * <template #customTemplate>\n   *   // custom HTML with login form\n   * </template>\n   * ```\n   * Then pass customTemplate to the sp-authport component like so `[customTemplate]=\"customTemplate\"`\n   */\n   customTemplate: TemplateRef<any>;\n\n  private user$: Observable<Account | boolean>;\n  private loggedIn$: Observable<boolean>;\n  private login: boolean;\n  private register: boolean;\n  private forgot: boolean;\n\n  constructor(public stormpath: Stormpath, public loginService: LoginService) {\n    this.user$ = this.stormpath.user$;\n    this.loggedIn$ = this.user$.map(user => !!user);\n  }\n\n  ngOnInit(): void {\n    this.loginService.login = true;\n    this.loginService.register = false;\n    this.forgot = this.loginService.forgot;\n    this.user$ = this.stormpath.user$;\n    this.loggedIn$ = this.user$.map(user => !!user);\n  }\n\n  showLogin(): void {\n    this.loginService.login = !(this.loginService.forgot = this.loginService.register = false);\n  }\n\n  showRegister(): void {\n    this.loginService.forgot = this.loginService.login = false;\n    this.loginService.register = true;\n  }\n\n  forgotPassword(): void {\n    this.loginService.login = false;\n    this.forgot = true;\n  }\n\n  logout(): void {\n    this.stormpath.logout();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sp-authport',\n  template: `<template #defaultTemplate>\n  <div class=\"container\">\n    <div class=\"row\" *ngIf=\"(user$ | async) === false\">\n      <div class=\"col-xs-12 col-sm-offset-3 col-sm-6\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4>\n              <ul class=\"nav nav-pills\">\n                <li role=\"presentation\" [ngClass]=\"{active:loginService.login || loginService.forgot}\" id=\"login\">\n                  <a href=\"\" (click)=\"showLogin(); false\">Sign In</a>\n                </li>\n                <li role=\"presentation\" [ngClass]=\"{active:loginService.register}\" id=\"register\" class=\"pull-right\">\n                  <a href=\"\" (click)=\"showRegister(); false\">Register</a>\n                </li>\n              </ul>\n            </h4>\n          </div>\n          <div class=\"panel-body text-center\">\n            <div class=\"row\" *ngIf=\"loginService.forgot\">\n              <forgot-password-form></forgot-password-form>\n            </div>\n            <div class=\"row\" *ngIf=\"loginService.login\">\n              <div class=\"col-xs-12\">\n                <login-form></login-form>\n              </div>\n            </div>\n            <div class=\"row\" *ngIf=\"loginService.register\">\n              <div class=\"col-xs-12\">\n                <register-form autoLogin=true></register-form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<template\n  [ngTemplateOutlet]=\"customTemplate || defaultTemplate\">\n</template>`,\n  providers: [LoginService]\n}, ] },\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Stormpath, },\n{type: LoginService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'customTemplate': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}