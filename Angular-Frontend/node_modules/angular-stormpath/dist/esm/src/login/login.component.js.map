{"version":3,"file":"login.component.js","sourceRoot":"","sources":["../../../../src/login/login.component.ts"],"names":[],"mappings":"OAAO,EAAE,SAAS,EAAuB,KAAK,EAAE,MAAM,eAAe;OAC9D,EAAE,UAAU,EAAE,MAAM,eAAe;OAGnC,EACL,SAAS,EAAkB,YAAY,EACxC,MAAM,gCAAgC;AAIvC;IAiBE,wBAAmB,SAAoB,EAAS,YAA0B;QAAvD,cAAS,GAAT,SAAS,CAAW;QAAS,iBAAY,GAAZ,YAAY,CAAc;IAC1E,CAAC;IAED,iCAAQ,GAAR;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC;QAChD,IAAI,CAAC,cAAc,GAAG;YACpB,KAAK,EAAE,EAAE;YACT,QAAQ,EAAE,EAAE;SACb,CAAC;IACJ,CAAC;IAED,8BAAK,GAAL,UAAM,IAAS;QAAf,iBAMC;QALC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC;aACtC,SAAS,CAAC,IAAI,EAAE,UAAC,KAA6B;YAC7C,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,+BAAM,GAAN;QACE,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;IACrC,CAAC;IACI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,2qCA2BA;iBACX,EAAG,EAAE;QACN,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,SAAS,GAAG;QACnB,EAAC,IAAI,EAAE,YAAY,GAAG;KACrB,EAH6F,CAG7F,CAAC;IACK,6BAAc,GAA2C;QAChE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KACnC,CAAC;IACF,qBAAC;AAAD,CAAC,AAlFD,IAkFC","sourcesContent":["import { Component, OnInit, TemplateRef, Input } from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Account } from '../shared/account';\nimport {\n  Stormpath, LoginFormModel, LoginService, StormpathErrorResponse\n} from '../stormpath/stormpath.service';\n\n\n\nexport class LoginComponent implements OnInit {\n  /**\n   * A reference to a `<template>` tag that if set will override this component's template. Use like so:\n   * ```\n   * <template #customTemplate>\n   *   // custom HTML with login form\n   * </template>\n   * ```\n   * Then pass customTemplate to the `login-form` component like so `[customTemplate]=\"customTemplate\"`\n   */\n   customTemplate: TemplateRef<any>;\n\n  protected loginFormModel: LoginFormModel;\n  protected user$: Observable<Account | boolean>;\n  protected loggedIn$: Observable<boolean>;\n  protected error: string;\n\n  constructor(public stormpath: Stormpath, public loginService: LoginService) {\n  }\n\n  ngOnInit(): void {\n    this.user$ = this.stormpath.user$;\n    this.loggedIn$ = this.user$.map(user => !!user);\n    this.loginFormModel = {\n      login: '',\n      password: ''\n    };\n  }\n\n  login(form: any): void {\n    this.error = null;\n    this.stormpath.login(this.loginFormModel)\n      .subscribe(null, (error: StormpathErrorResponse) => {\n        this.error = error.message;\n      });\n  }\n\n  forgot(): void {\n    this.loginService.forgotPassword();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'login-form',\n  template: `<template #defaultTemplate>\n<form class=\"form-horizontal\" #form=\"ngForm\" (ngSubmit)=\"login(form.value)\" autocomplete=\"off\">\n  <div class=\"form-group\">\n    <label for=\"loginField\" class=\"col-sm-3 control-label\">Email</label>\n    <div class=\"col-sm-9\">\n      <input class=\"form-control\" name=\"login\" id=\"loginField\" type=\"text\" required [(ngModel)]=\"loginFormModel.login\">\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"passwordField\" class=\"col-sm-3 control-label\">Password</label>\n    <div class=\"col-sm-9\">\n      <input class=\"form-control\" name=\"password\" id=\"passwordField\" type=\"password\" required [(ngModel)]=\"loginFormModel.password\">\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <div class=\"col-xs-10 col-xs-offset-3 text-left\">\n      <a href=\"#\" (click)=\"forgot(); false\">&nbsp;Forgot Password?</a>\n    </div>\n  </div>\n\n  <div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>\n  <button id=\"loginBtn\" type=\"submit\" class=\"btn btn-primary pull-right\">Login</button>\n</form>\n</template>\n<template\n  [ngTemplateOutlet]=\"customTemplate || defaultTemplate\">\n</template>`\n}, ] },\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Stormpath, },\n{type: LoginService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'customTemplate': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}