{
  "_args": [
    [
      {
        "raw": "ng2-webstorage@1.4.3",
        "scope": null,
        "escapedName": "ng2-webstorage",
        "name": "ng2-webstorage",
        "rawSpec": "1.4.3",
        "spec": "1.4.3",
        "type": "version"
      },
      "C:\\Users\\SAI\\Documents\\workspace-sts-3.9.0.RELEASE\\Angular-Frontend\\node_modules\\angular-stormpath"
    ]
  ],
  "_from": "ng2-webstorage@1.4.3",
  "_id": "ng2-webstorage@1.4.3",
  "_inCache": true,
  "_location": "/ng2-webstorage",
  "_nodeVersion": "7.2.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/ng2-webstorage-1.4.3.tgz_1482767389091_0.8438032483682036"
  },
  "_npmUser": {
    "name": "polochon",
    "email": "gaignoux.nicolas@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ng2-webstorage@1.4.3",
    "scope": null,
    "escapedName": "ng2-webstorage",
    "name": "ng2-webstorage",
    "rawSpec": "1.4.3",
    "spec": "1.4.3",
    "type": "version"
  },
  "_requiredBy": [
    "/angular-stormpath"
  ],
  "_resolved": "https://registry.npmjs.org/ng2-webstorage/-/ng2-webstorage-1.4.3.tgz",
  "_shasum": "cb197e11362eeeac0681309cd1ee613d219e8e94",
  "_shrinkwrap": null,
  "_spec": "ng2-webstorage@1.4.3",
  "_where": "C:\\Users\\SAI\\Documents\\workspace-sts-3.9.0.RELEASE\\Angular-Frontend\\node_modules\\angular-stormpath",
  "author": {
    "name": "Nicolas Gaignoux",
    "email": "https://github.com/PillowPillow"
  },
  "bugs": {
    "url": "https://github.com/PillowPillow/ng2-webstorage/issues"
  },
  "dependencies": {},
  "description": "angular2 webstorage manager",
  "devDependencies": {
    "@angular/common": "^2.4.1",
    "@angular/compiler": "^2.4.1",
    "@angular/compiler-cli": "^2.4.1",
    "@angular/core": "^2.4.1",
    "@angular/forms": "^2.4.1",
    "@angular/platform-browser": "2.4.1",
    "@angular/platform-browser-dynamic": "^2.4.1",
    "@angular/platform-server": "^2.4.1",
    "compression-webpack-plugin": "^0.3.1",
    "es6-shim": "^0.35.1",
    "es6-symbol": "^3.0.2",
    "es7-reflect-metadata": "^1.6.0",
    "istanbul-instrumenter-loader": "^0.2.0",
    "jasmine-core": "2.4.1",
    "karma": "^0.13.22",
    "karma-chrome-launcher": "^1.0.1",
    "karma-coverage": "^1.0.0",
    "karma-jasmine": "^1.0.2",
    "karma-mocha-reporter": "^2.0.3",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.7.0",
    "remap-istanbul": "^0.6.4",
    "rimraf": "^2.5.2",
    "rollup": "^0.36.1",
    "rxjs": "^5.0.0-beta.12",
    "source-map-loader": "^0.1.5",
    "ts-helpers": "^1.1.1",
    "ts-loader": "^0.8.2",
    "tslint": "^3.10.2",
    "tslint-loader": "^2.1.4",
    "typescript": "2.0.6",
    "webpack": "^1.13.1",
    "webpack-dev-server": "^1.14.1",
    "webpack-merge": "^0.13.0",
    "zone.js": "^0.7.2"
  },
  "directories": {},
  "dist": {
    "shasum": "cb197e11362eeeac0681309cd1ee613d219e8e94",
    "tarball": "https://registry.npmjs.org/ng2-webstorage/-/ng2-webstorage-1.4.3.tgz"
  },
  "gitHead": "3b19735ecfaa628c7cf2f0b671a04ea507ce338e",
  "homepage": "https://github.com/PillowPillow/ng2-webstorage#readme",
  "keywords": [
    "typescript",
    "angular2",
    "ng2",
    "localstorage",
    "sessionStorage"
  ],
  "license": "MIT",
  "main": "bundles/core.umd.js",
  "maintainers": [
    {
      "name": "polochon",
      "email": "gaignoux.nicolas@gmail.com"
    }
  ],
  "module": "dist/app.js",
  "name": "ng2-webstorage",
  "optionalDependencies": {},
  "readme": "# ng2-webstorage\r\n###Local and session storage - angular2 service (*typescript*)\r\n=======================\r\n\r\nThis library provides an easy to use service to manage the web storages (local and session) from your ng2 application.\r\nIt provides also two decorators to synchronize the component attributes and the web storages.\r\n\r\n------------\r\n\r\n#### Index:\r\n* [Getting Started](#gstart)\r\n* [Services](#services):\r\n\t* [LocalStorageService](#s_localstorage)\r\n\t* [SessionStorageService](#s_sessionstorage)\r\n* [Decorators](#decorators):\r\n\t* [@LocalStorage](#d_localstorage)\r\n\t* [@SessionStorage](#d_sessionStorage)\r\n* [Modify and build](#modifBuild)\r\n\r\n------------\r\n\r\n### <a name=\"gstart\">Getting Started</a>\r\n\r\n1. Download the library using npm `npm install --save ng2-webstorage`\r\n2. Register the library in your module\r\n\r\n\t```typescript\r\n\timport {NgModule} from '@angular/core';\r\n\timport {BrowserModule} from '@angular/platform-browser';\r\n\timport {Ng2Webstorage} from 'ng2-webstorage';\r\n\r\n\t@NgModule({\r\n\t\tdeclarations: [...],\r\n\t\timports: [\r\n\t\t\tBrowserModule,\r\n\t\t\tNg2Webstorage,\r\n\t\t\t//Ng2Webstorage.forRoot({ prefix: 'custom', separator: '.' }) The forRoot method allows to configure the prefix and the separator used by the library\r\n\t\t],\r\n\t\tbootstrap: [...]\r\n\t})\r\n\texport class AppModule {\r\n\t}\r\n\r\n\t```\r\n\t\r\n\tBecause of the decorators needs, you can't use *for Root* to configure the library with AoT compilations, an exposed function named *configure* is available to handle this case.\r\n\t```typescript\r\n\timport {NgModule} from '@angular/core';\r\n\timport {BrowserModule} from '@angular/platform-browser';\r\n\timport {Ng2Webstorage, configure} from 'ng2-webstorage';\r\n\r\n\tconfigure({ prefix: 'custom', separator: '.' });\r\n\r\n\t// import {Ng2Webstorage, configure: WebstorageConfigure} from 'ng2-webstorage'; // Don't forget you can make an alias if the configure key is already in use\r\n\t// WebstorageConfigure({ prefix: 'custom', separator: '.' });\r\n\r\n\t@NgModule({\r\n\t\tdeclarations: [...],\r\n\t\timports: [\r\n\t\t\tBrowserModule,\r\n\t\t\tNg2Webstorage,\r\n\t\t],\r\n\t\tbootstrap: [...]\r\n\t})\r\n\texport class AppModule {\r\n\t}\r\n\r\n\t```\r\n\t\r\n\tIf you're using systemJS, you have to reference the umd version of the lib in your config.\r\n\t```` typescript\r\n\t\tSystem.config({\r\n\t\t\tmap: { \r\n\t\t\t\t...,\r\n\t\t\t\t'ng2-webstorage': 'node_modules/ng2-webstorage'\r\n\t\t\t},\r\n\t\t\tpackages: {\r\n\t\t\t\t...,\r\n\t\t\t\t'ng2-webstorage': {main: 'bundles/core.umd.js', defaultExtension: 'js'}\r\n\t\t\t}\r\n\t\t});\r\n\t````\r\n\t\r\n\r\n3. Inject the services you want in your components and/or use the available decorators\r\n\r\n\t```typescript\r\n\timport {Component} from '@angular/core';\r\n\timport {LocalStorageService, SessionStorageService} from 'ng2-webstorage';\r\n\r\n\t@Component({\r\n\t\tselector: 'foo',\r\n\t\ttemplate: `foobar`\r\n\t})\r\n\texport class FooComponent {\r\n\r\n\t\tconstructor(private localSt:LocalStorageService) {}\r\n\r\n\t\tngOnInit() {\r\n\t\t\tthis.localSt.observe('key')\r\n\t\t\t\t.subscribe((value) => console.log('new value', value));\r\n\t\t}\r\n\r\n\t}\r\n\t```\r\n\r\n\t```typescript\r\n\timport {Component} from '@angular/core';\r\n\timport {LocalStorage, SessionStorage} from 'ng2-webstorage';\r\n\r\n\t@Component({\r\n\t\tselector: 'foo',\r\n\t\ttemplate: `{{boundValue}}`,\r\n\t})\r\n\texport class FooComponent {\r\n\r\n\t\t@LocalStorage()\r\n\t\tpublic boundValue;\r\n\r\n\t}\r\n\t```\r\n\r\n### <a name=\"services\">Services</a>\r\n--------------------\r\n\r\n###<a name=\"s_localstorage\">`LocalStorageService`</a>\r\n\r\n#### Store( key:`string`, value:`any` ):`void`\r\n> create or update an item in the local storage\r\n\r\n##### Params:\r\n- **key**:     String.   localStorage key.\r\n- **value**:     Serializable.   value to store.\r\n\r\n##### Usage:\r\n````typescript\r\nimport {Component} from '@angular/core';\r\nimport {LocalStorageService} from 'ng2-webstorage';\r\n\r\n@Component({\r\n\tselector: 'foo',\r\n\ttemplate: `\r\n\t\t<section><input type=\"text\" [(ngModel)]=\"attribute\"/></section>\r\n\t\t<section><button (click)=\"saveValue()\">Save</button></section>\r\n\t`,\r\n})\r\nexport class FooComponent {\r\n\r\n    attribute;\r\n\r\n    constructor(private storage:LocalStorageService) {}\r\n\r\n    saveValue() {\r\n      this.storage.store('boundValue', this.attribute);\r\n    }\r\n\r\n}\r\n````\r\n\r\n------------\r\n\r\n#### Retrieve( key:`string` ):`any`\r\n> retrieve a value from the local storage\r\n\r\n##### Params:\r\n- **key**:     String.   localStorage key.\r\n\r\n##### Result:\r\n- Any; value\r\n\r\n##### Usage:\r\n````typescript\r\nimport {Component} from '@angular/core';\r\nimport {LocalStorageService} from 'ng2-webstorage';\r\n\r\n@Component({\r\n\tselector: 'foo',\r\n\ttemplate: `\r\n\t\t<section>{{attribute}}</section>\r\n\t\t<section><button (click)=\"retrieveValue()\">Retrieve</button></section>\r\n\t`,\r\n})\r\nexport class FooComponent {\r\n\r\n    attribute;\r\n\r\n    constructor(private storage:LocalStorageService) {}\r\n\r\n    retrieveValue() {\r\n      this.attribute = this.storage.retrieve('boundValue');\r\n    }\r\n\r\n}\r\n````\r\n\r\n------------\r\n\r\n#### Clear( key?:`string` ):`void`\r\n\r\n##### Params:\r\n- **key**: *(Optional)*     String.   localStorage key.\r\n\r\n##### Usage:\r\n````typescript\r\nimport {Component} from '@angular/core';\r\nimport {LocalStorageService, LocalStorage} from 'ng2-webstorage';\r\n\r\n@Component({\r\n\tselector: 'foo',\r\n\ttemplate: `\r\n\t\t<section>{{boundAttribute}}</section>\r\n\t\t<section><button (click)=\"clearItem()\">Clear</button></section>\r\n\t`,\r\n})\r\nexport class FooComponent {\r\n\r\n    @LocalStorage('boundValue')\r\n    boundAttribute;\r\n\r\n    constructor(private storage:LocalStorageService) {}\r\n\r\n    clearItem() {\r\n      this.storage.clear('boundValue');\r\n      //this.storage.clear(); //clear all the managed storage items\r\n    }\r\n\r\n}\r\n````\r\n\r\n------------\r\n\r\n#### Observe( key?:`string` ):`EventEmitter`\r\n\r\n##### Params:\r\n- **key**:     String.   localStorage key.\r\n\r\n##### Result:\r\n- Observable; instance of EventEmitter\r\n\r\n##### Usage:\r\n````typescript\r\nimport {Component} from '@angular/core';\r\nimport {LocalStorageService, LocalStorage} from 'ng2-webstorage';\r\n\r\n@Component({\r\n\tselector: 'foo',\r\n\ttemplate: `{{boundAttribute}}`,\r\n})\r\nexport class FooComponent {\r\n\r\n    @LocalStorage('boundValue')\r\n    boundAttribute;\r\n\r\n    constructor(private storage:LocalStorageService) {}\r\n\r\n    ngOnInit() {\r\n      this.storage.observe('boundValue')\r\n        .subscribe((newValue) => {\r\n          console.log(newValue);\r\n        })\r\n    }\r\n\r\n}\r\n````\r\n\r\n\r\n###<a name=\"s_sessionStorage\">`SessionStorageService`</a>\r\n> The api is identical as the LocalStorageService's\r\n\r\n### <a name=\"decorators\">Decorators</a>\r\n--------------------\r\n\r\n###<a name=\"d_localstorage\">`@LocalStorage`</a>\r\n> Synchronize the decorated attribute with a given value in the localStorage\r\n\r\n#### Params:\r\n - **storage key**: *(Optional)*    String.   localStorage key, by default the decorator will take the attribute name.\r\n\r\n#### Usage:\r\n````typescript\r\nimport {Component} from '@angular/core';\r\nimport {LocalStorage, SessionStorage} from 'ng2-webstorage';\r\n\r\n@Component({\r\n\tselector: 'foo',\r\n\ttemplate: `{{boundAttribute}}`,\r\n})\r\nexport class FooComponent {\r\n\r\n\t@LocalStorage()\r\n\tpublic boundAttribute;\r\n\r\n}\r\n````\r\n\r\n------------\r\n\r\n###<a name=\"d_sessionStorage\">`@SessionStorage`</a>\r\n> Synchronize the decorated attribute with a given value in the sessionStorage\r\n\r\n#### Params:\r\n - **storage key**: *(Optional)*    String.   SessionStorage key, by default the decorator will take the attribute name.\r\n\r\n#### Usage:\r\n````typescript\r\nimport {Component} from '@angular/core';\r\nimport {LocalStorage, SessionStorage} from 'ng2-webstorage';\r\n\r\n@Component({\r\n\tselector: 'foo',\r\n\ttemplate: `{{randomName}}`,\r\n})\r\nexport class FooComponent {\r\n\r\n\t@SessionStorage('AnotherBoundAttribute')\r\n\tpublic randomName;\r\n\r\n}\r\n````\r\n\r\n### <a name=\"modifBuild\">Modify and build</a>\r\n--------------------\r\n\r\n`npm install`\r\n\r\n*Start the unit tests:* `npm run test`\r\n\r\n*Start the unit tests:* `npm run test:watch`\r\n\r\n*Start the dev server:* `npm run dev` then go to *http://localhost:8080/webpack-dev-server/index.html*\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/PillowPillow/ng2-webstorage.git"
  },
  "scripts": {
    "build": "npm run ngc && npm run bundle",
    "bundle": "uglifyjs --compress --mangle --output bundles/core.umd.min.js -- bundles/core.umd.js",
    "clean": "node node_modules/rimraf/bin dist bundles",
    "dev": "node node_modules/webpack-dev-server/bin/webpack-dev-server --content-base example --port=8080 --hot --progress -c --config config/webpack.dev.js",
    "dev2": "node node_modules/webpack-dev-server/bin/webpack-dev-server --content-base example --port=8081 --host 0.0.0.0 --hot --progress -c --config config/webpack.dev.js",
    "ngc": "ngc --p config/tsconfig.dist.json",
    "postngc": "node node_modules/rimraf/bin lib/**/app.ngfactory.* lib/**/*.ngsummary.json",
    "prebuild": "npm run clean",
    "prebundle": "node  node_modules/rollup/bin/rollup -c config/rollup.js",
    "test": "karma start",
    "test:watch": "npm run test -- --auto-watch --no-single-run"
  },
  "typings": "dist/app.d.ts",
  "version": "1.4.3"
}
